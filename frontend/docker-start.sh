#!/bin/bash

# Script para iniciar o ambiente Docker

set -e

echo "üöÄ Iniciando Sunakortix Docker Environment..."

# Verificar se o arquivo .env.local existe
if [ ! -f .env.local ]; then
    echo "‚ö†Ô∏è  Arquivo .env.local n√£o encontrado!"
    echo "üìù Criando arquivo .env.local de exemplo..."
    cat > .env.local << EOF
# Supabase
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Vercel (opcional)
NEXT_PUBLIC_VERCEL_ENV=development

# Posthog (opcional)
NEXT_PUBLIC_POSTHOG_KEY=your-posthog-key
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# Cal.com (opcional)
NEXT_PUBLIC_CAL_LINK=your-cal-link
EOF
    echo "‚úÖ Arquivo .env.local criado. Por favor, configure suas vari√°veis de ambiente."
    exit 1
fi

# Fun√ß√£o para escolher o ambiente
choose_environment() {
    echo ""
    echo "Escolha o ambiente:"
    echo "1) Produ√ß√£o (otimizado)"
    echo "2) Desenvolvimento (hot-reload)"
    echo "3) Ambos"
    read -p "Op√ß√£o [1-3]: " choice
    
    case $choice in
        1)
            start_production
            ;;
        2)
            start_development
            ;;
        3)
            start_both
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            exit 1
            ;;
    esac
}

# Iniciar ambiente de produ√ß√£o
start_production() {
    echo "üì¶ Construindo imagem de produ√ß√£o..."
    docker-compose build frontend
    
    echo "üöÄ Iniciando container de produ√ß√£o..."
    docker-compose up -d frontend
    
    echo "‚úÖ Ambiente de produ√ß√£o iniciado!"
    echo "üåê Acesse: http://localhost:3000"
    
    # Mostrar logs
    echo ""
    read -p "Deseja ver os logs? (s/n): " show_logs
    if [ "$show_logs" = "s" ]; then
        docker-compose logs -f frontend
    fi
}

# Iniciar ambiente de desenvolvimento
start_development() {
    echo "üîß Construindo imagem de desenvolvimento..."
    docker-compose --profile dev build frontend-dev
    
    echo "üöÄ Iniciando container de desenvolvimento..."
    docker-compose --profile dev up -d frontend-dev
    
    echo "‚úÖ Ambiente de desenvolvimento iniciado!"
    echo "üåê Acesse: http://localhost:3001"
    echo "üìù Hot-reload habilitado!"
    
    # Mostrar logs
    echo ""
    read -p "Deseja ver os logs? (s/n): " show_logs
    if [ "$show_logs" = "s" ]; then
        docker-compose logs -f frontend-dev
    fi
}

# Iniciar ambos os ambientes
start_both() {
    echo "üì¶ Construindo imagens..."
    docker-compose build
    docker-compose --profile dev build
    
    echo "üöÄ Iniciando containers..."
    docker-compose up -d frontend
    docker-compose --profile dev up -d frontend-dev
    
    echo "‚úÖ Ambos os ambientes iniciados!"
    echo "üåê Produ√ß√£o: http://localhost:3000"
    echo "üåê Desenvolvimento: http://localhost:3001"
    
    # Mostrar status
    docker-compose ps
}

# Menu principal
echo ""
echo "==================================="
echo "   Sunakortix Docker Manager"
echo "==================================="

# Verificar se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando!"
    echo "Por favor, inicie o Docker Desktop e tente novamente."
    exit 1
fi

# Escolher a√ß√£o
echo ""
echo "O que deseja fazer?"
echo "1) Iniciar ambiente"
echo "2) Parar containers"
echo "3) Reiniciar containers"
echo "4) Ver logs"
echo "5) Limpar tudo (containers, imagens, volumes)"
echo "6) Status dos containers"
read -p "Op√ß√£o [1-6]: " action

case $action in
    1)
        choose_environment
        ;;
    2)
        echo "üõë Parando containers..."
        docker-compose down
        docker-compose --profile dev down
        echo "‚úÖ Containers parados!"
        ;;
    3)
        echo "üîÑ Reiniciando containers..."
        docker-compose restart
        docker-compose --profile dev restart
        echo "‚úÖ Containers reiniciados!"
        ;;
    4)
        echo "Qual log deseja ver?"
        echo "1) Produ√ß√£o"
        echo "2) Desenvolvimento"
        read -p "Op√ß√£o [1-2]: " log_choice
        
        case $log_choice in
            1)
                docker-compose logs -f frontend
                ;;
            2)
                docker-compose logs -f frontend-dev
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida!"
                ;;
        esac
        ;;
    5)
        echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso remover√° todos os containers, imagens e volumes!"
        read -p "Tem certeza? (s/n): " confirm
        
        if [ "$confirm" = "s" ]; then
            echo "üßπ Limpando ambiente Docker..."
            docker-compose down -v --rmi all
            docker-compose --profile dev down -v --rmi all
            echo "‚úÖ Limpeza completa!"
        else
            echo "‚ùå Opera√ß√£o cancelada!"
        fi
        ;;
    6)
        echo "üìä Status dos containers:"
        docker-compose ps
        docker-compose --profile dev ps
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida!"
        exit 1
        ;;
esac

echo ""
echo "==================================="
echo "          Opera√ß√£o conclu√≠da!"
echo "===================================="